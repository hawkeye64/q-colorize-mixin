(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["26bfabfa"],{2514:function(e,o,r){"use strict";var n=function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("div",[r("section",{staticClass:"page-header"},[r("div",{staticClass:"text-h1 project-name"},[e._v("Colorize & Theme")]),r("div",{staticClass:"text-h2 project-tagline"},[e._v("Mixins for Vue Render Functions")]),r("div",{staticClass:"byline"},[e._v("Created and maintained by Jeff Galbraith")]),r("div",{staticClass:"quasar"},[e._v("A Quasar Framework App Extension")]),r("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://github.com/hawkeye64/app-extension-colorize",target:"_blank",label:"View on GitHub","no-caps":"",flat:""}}),r("q-btn",{staticClass:"btn",attrs:{to:"/docs",label:"Docs","no-caps":"",flat:""}}),r("q-btn",{staticClass:"btn",attrs:{to:"/examples",label:"Examples","no-caps":"",flat:""}}),r("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://donate.quasar.dev",target:"_blank",label:"Donate","no-caps":"",flat:""}})],1),r("main",{staticClass:"flex flex-start justify-center inset-shadow"},[r("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg inset-shadow",staticStyle:{width:"100%",height:"3px"}}),r("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg bg-white shadow-1",staticStyle:{"max-width":"800px",width:"100%"}},[e._t("default")],2)])])},a=[],t={name:"Hero"},l=t,d=r("2877"),s=Object(d["a"])(l,n,a,!1,null,null,null);o["a"]=s.exports},"37a6":function(e){e.exports=JSON.parse('{"type":"mixin","props":{"theme-enabled":{"type":"Boolean","category":"style","desc":"Turns theming on or off"},"theme":{"type":"Object","category":"style","desc":"A customized theme definition (see examples above)","__exemption":["examples"]}},"methods":{"useDefaultTheme":{"desc":"Used as a placeholder when theming is turned off (replaces `setBothColors` in Colorize mixin)","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","__exemption":["examples"]},"bgColor":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","__exemption":["examples"]},"data":{"type":"Object","desc":"Typically the `{ }` of a render function","__exemption":["examples"]}},"returns":{"type":"Object","desc":"The passed in `data` with no modifications"}},"getThemeColors":{"desc":"Returns a Map of theme items based on passed in keys","__exemption":["examples"],"params":{"keys":{"type":"Array","desc":"An arry of keys to return from the `theme` object","__exemption":["examples"]}},"returns":{"type":"Map","desc":"Returns a Map of theme items based on passed in keys"}}}}')},"3aaa":function(e){e.exports=JSON.parse('{"type":"mixin","props":{"color":{"type":"String","category":"style","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","examples":["color=\\"orange-8\\"","color=\\"#c8c8c8\\""]}},"methods":{"setTextColor":{"desc":"Sets the text color of the passed in object. Function determines if passed in `color` is a Quasar color or CSS color","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","__exemption":["examples"]},"data":{"type":"Object","desc":"Typically the `{ }` of a render function","__exemption":["examples"]}},"returns":{"type":"Object","desc":"The passed in `data` with modifications"}},"setBackgroundColor":{"desc":"Sets the background color of the passed in object. Function determines if passed in `color` is a Quasar color or CSS color","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","__exemption":["examples"]},"data":{"type":"Object","desc":"Typically the `{ }` of a render function","__exemption":["examples"]}},"returns":{"type":"Object","desc":"The passed in `data` with modifications"}},"setBorderColor":{"desc":"Sets the border color of the passed in object. Function determines if passed in `color` is a Quasar color or CSS color","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","__exemption":["examples"]},"data":{"type":"Object","desc":"Typically the `{ }` of a render function","__exemption":["examples"]}},"returns":{"type":"Object","desc":"The passed in `data` with modifications"},"setBothColors":{"desc":"Combination of `setTextColor` and `setBackgroundColor`","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","__exemption":["examples"]},"bgColor":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","__exemption":["examples"]},"data":{"type":"Object","desc":"Typically the `{ }` of a render function","__exemption":["examples"]}},"returns":{"type":"Object","desc":"The passed in `data` with modifications"}}},"isNamedCssColor":{"desc":"Returns true if passed in color is a css named color","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or a CSS color (#, rgb, rgba, hls, etc)","examples":["isNamedCssColor(\'slateblue\')","isNamedCssColor(\'whitesmoke\')"]}},"returns":{"type":"Boolean","desc":"Returns true if passed in color is a css named color"}},"isCssColor":{"desc":"Returns true if passed in color is a named color, hex color or rgb/rgba/hsl/hsla color","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any CSS named color, hex color or rgb/rgba/hsl/hsla color","examples":["isCssColor(\'transparent\')","isCssColor(\'#c0c0c0\')","isCssColor(\'oldlace\')","isCssColor(\'rgba(255,0,0,0.2)\')","isCssColor(\'--orange-8\')"]}},"returns":{"type":"Boolean","desc":"Returns true if passed in color is a named color, hex color or rgb/rgba/hsl/hsla color"}},"isCssVar":{"desc":"Returns true if passed in color is a CSS variable starting with `--`","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any css var color","examples":["isCssVar(\'--orange-8\')","isCssVar(\'--blue-grey-6\')"]}},"returns":{"type":"Boolean","desc":"Returns true if passed in color is a CSS variable starting with `--`"}},"calculateColor":{"desc":"Check if a color is a standard CSS color or a Quasar color (if Quasar, returns the calculated Quasar color)","__exemption":["examples"],"params":{"color":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette), CSS color (#, rgb, rgba, hls, etc), or CSS var color","__exemption":["examples"]},"defaultColor":{"type":"String","desc":"","default":"black","__exemption":["examples"]}},"returns":{"type":"String","desc":"The calculated color"}},"makeQuasarColorVar":{"desc":"Generate a CSS variable definition based on the quasar color or existing variable passed in","examples":["var(--q-color-red-5, \'default\')"],"params":{"color":{"type":"String","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette), CSS color (#, rgb, rgba, hls, etc), or CSS var color","__exemption":["examples"]},"defaultColor":{"type":"String","desc":"","default":"black","__exemption":["examples"]}},"returns":{"type":"String","desc":"The generated CSS variable definition"}}}}')},"8b24":function(e,o,r){"use strict";r.r(o);var n=function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("hero",[r("q-markdown",{attrs:{src:e.markdown,toc:""},on:{data:e.onToc}}),r("component-api",{attrs:{title:"Colorize API",json:e.colorizeJson,type:"Vue Mixin"}}),r("component-api",{attrs:{title:"Theme API",json:e.themeJson,type:"Vue Mixin"}}),r("q-markdown",[e._v("\n# Donate\nIf you appreciate the work that went into this App Extension, please consider [donating to Quasar](https://donate.quasar.dev).\n\n---\nThis page created with [QMarkdown](https://quasarframework.github.io/app-extension-qmarkdown), another great Quasar App Extension.\n    ")]),r("q-page-scroller",{attrs:{position:"bottom-right","scroll-offset":150,offset:[18,18]}},[r("q-btn",{attrs:{fab:"",icon:"keyboard_arrow_up",color:"primary"}})],1)],1)},a=[],t=r("2514"),l="Colorize & Theme\n===\n\nColorize and Theme are Vue Mix-ins for components created with Quasar Framework. They are only for components that use a `render` function. They do not work with template formats found with SFC (single file components).\n\n# Features\n\nAllows you to \"skin\" your component with customized text, background and border colors. You can use:\n1. any color from the [Quasar Color Palette](https://quasar.dev/style/color-palette#Color-List),\n2. any # color (ex: `#c0c0c0`),\n3. rgb/rgba/hsl/hsla color (ex: `rgb(255,0,0)`),\n4. any css named colors (ex: `ghostwhite`) or\n5. any Quasar colors from css var (ex: `--q-color-red-10`)\n6. any Quasar colors as `border-` (ex: `border-blue-grey-10`)\n\nThis is a lot of choices!\n\n# Install\nTo add this mix-in to your Quasar application, run the following (in your Quasar app folder):\n\n```bash\nquasar ext add @quasar/colorize\n```\n\n# Uninstall\nTo remove this mix-in from your Quasar application, run the following (in your Quasar app folder):\n\n```bash\nquasar ext remove @quasar/colorize\n```\n\n# Examples\nExamples with code can be found [here](https://hawkeye64.github.io/app-extension-colorize/examples).\n\n# Demo Project (source)\nSource for this application can be found [here](https://github.com/hawkeye64/app-extension-colorize/tree/master/demo).\n\n# Code Usage\n\nIt is important to note that these mixins are intended to be used with Vue **render** functions and not in SFC (single file components). They do not have a render function of their own.\n\nYou can use Colorize (or Theme) in one of two ways:\n1. As a Vue mixin or\n2. By extending\n\n## As a Mixin\n\n```js\nimport Vue from 'vue'\nimport Colorize from '@quasar/quasar-app-extension-colorize/src/colorize'\n\nexport default Vue.extend({\n  name: 'my-component',\n\n  mixins: [Colorize], // <- notice use as a Vue mixin\n...\n```\n\n## By Extending\n\n```js\nimport Colorize from '@quasar/quasar-app-extension-colorize/src/colorize'\n\nexport default Colorize.extend({\n  name: 'my-component',\n...\n```\n\nYou can decide which way is best for you based on your needs.\n\n# Simple Examples\n\n## Colorize\n\n### Use Text and Background Color Definition\n\n```js\nimport Vue from 'vue'\nimport Colorize from '@quasar/quasar-app-extension-colorize/src/colorize'\n\nexport default Vue.extend({\n  name: 'my-component',\n\n  mixins: [Colorize],\n\n  props: {\n    // color prop is added by colorize mix-in\n    // background-color is optional and needs to be added if needed\n    bgColor: String\n  },\n\n  render (h) {\n    return h('div', this.setBothColors(this.color, this.bgColor, {\n      style: {\n        width: '200px',\n        height: '200px'\n      }\n    }), [\n      this.$slots.default\n    ])\n  }\n})\n```\n\n### Use Border Color Definition\n\n```js\nimport Vue from 'vue'\nimport Colorize from '@quasar/quasar-app-extension-colorize/src/colorize'\n\nexport default Vue.extend({\n  name: 'my-component',\n\n  mixins: [Colorize],\n\n  props: {\n    // color prop is added by colorize mix-in\n    // background-color is optional and needs to be added if needed\n    borderColor: String\n  },\n\n  render (h) {\n    return h('div', this.setBorderColor(this.color, this.borderColor, {\n      style: {\n        width: '200px',\n        height: '200px'\n      }\n    }), [\n      this.$slots.default\n    ])\n  }\n})\n```\n\n### Use CSS Vars\n\nAll of the CSS in this App Extension will autmatically be injected into your app.\n\n```js\nimport Colorize from '@quasar/quasar-app-extension-colorize/src/colorize'\n\nexport default Vue.extend({\n  name: 'my-component',\n\n  mixins: [Colorize],\n\n  props: {\n    backgroundColor: {\n      type: String,\n      default: 'primary' // any color\n    }\n  },\n\n  computed: {\n    styles () {\n      let style = {}\n      style['--qribbon-text-color'] = this.calculateColor(this.color, 'white')\n      style['--qribbon-background-color'] = this.calculateColor(this.backgroundColor) // Notice default is against the prop in this instance\n      return style\n    }\n  },\n\n  ...\n\n  render (h) {\n    return h('div', {\n      style: this.styles\n    }, [\n      this.$slots.default\n    ])\n  }\n})\n```\n\n## Theme\n\nWhen using the Theme mix-in, two properties are added to your component: `theme` (Object) and `enableTheme` (Boolean). It also has two functions: `useDefaultTheme` and `getThemeColors` (see Theme API below for more details).\n\nA `theme` object contains a definition of a theme. There are many ways you can handle a theme. You can keep your pre-defined themes in an array of objects or in a JavaScript file that loads at run-time, or in individual theme files that are loaded on demand when the theme needs to be changed. This is entirely up to you, the developer. In the examples, we will be storing the themes in a javascript var so when you look at code, you can see them. It is recommended to store them in a file or files.\n\n### Theme Object\n\nA `theme` object, in it's simplist form, looks like this:\n\n```js\n  {\n    name: 'default'\n  }\n```\n\nThe rest of what a theme looks like is entirely up to the developer and how they would like to \"skin\" their application.\n\nFor instance, this is the one used by QCalendar in `theme.js`:\n\n```js\nexport default [\n  {\n    name: 'default'\n  },\n  {\n    name: 'dark',\n    // body\n    colorBody: 'grey-2',\n    backgroundBody: 'blue-grey-8',\n    colorBodyOutside: 'grey-6',\n    backgroundBodyOutside: 'blue-grey-8',\n    colorBodyPast: 'grey-11',\n    backgroundBodyPast: 'blue-grey-6',\n    colorBodyCurrent: 'blue-grey-2',\n    backgroundBodyCurrent: 'blue-grey-10',\n    colorBodyFuture: 'blue-grey-2',\n    backgroundBodyFuture: 'blue-grey-10',\n    // header - weekly only\n    colorHeader: 'blue-grey-2',\n    backgroundHeader: 'blue-grey-10',\n    colorHeaderOutside: 'blue-grey-2',\n    backgroundHeaderOutside: 'blue-grey-10',\n    // header - for daily only\n    colorHeaderPast: 'grey-11',\n    backgroundHeaderPast: 'blue-grey-6',\n    colorHeaderCurrent: 'blue-grey-2',\n    backgroundHeaderCurrent: 'blue-grey-10',\n    colorHeaderFuture: 'blue-grey-2',\n    backgroundHeaderFuture: 'blue-grey-10',\n    // work week - monthly only\n    colorWorkWeekPast: 'blue-grey-8',\n    backgroundWorkWeekPast: 'blue-grey-6',\n    colorWorkWeekCurrent: 'orange-4',\n    backgroundWorkWeekCurrent: 'blue-grey-10',\n    colorWorkWeekFuture: 'yellow-4',\n    backgroundWorkWeekFuture: 'blue-grey-10',\n    // label\n    colorDayLabelOutside: 'blue-grey-2',\n    backgroundDayLabelOutside: 'blue-grey-8',\n    colorDayLabelPast: 'grey-11',\n    backgroundDayLabelPast: 'blue-grey-6',\n    colorDayLabelCurrent: 'orange-4',\n    backgroundDayLabelCurrent: 'blue-grey-10',\n    colorDayLabelFuture: 'yellow-4',\n    backgroundDayLabelFuture: 'blue-grey-10',\n    // interval body\n    colorIntervalHeader: 'grey-2',\n    backgroundIntervalHeader: 'blue-grey-8',\n    colorIntervalBody: 'grey-2',\n    backgroundIntervalBody: 'blue-grey-8',\n    colorIntervalText: 'grey-2',\n    backgroundIntervalText: 'blue-grey-8',\n    // scheduler body\n    colorSchedulerHeader: 'grey-2',\n    backgroundSchedulerHeader: 'blue-grey-8',\n    colorSchedulerBody: 'grey-2',\n    backgroundSchedulerBody: 'blue-grey-8',\n    colorSchedulerText: 'grey-2',\n    backgroundSchedulerText: 'blue-grey-8'\n  },\n  {\n    name: 'teal',\n    // body\n    colorBody: 'grey-2',\n    backgroundBody: 'teal-8',\n    colorBodyOutside: 'grey-6',\n    backgroundBodyOutside: 'teal-8',\n    colorBodyPast: 'grey-11',\n    backgroundBodyPast: 'teal-6',\n    colorBodyCurrent: 'teal-2',\n    backgroundBodyCurrent: 'teal-10',\n    colorBodyFuture: 'teal-2',\n    backgroundBodyFuture: 'teal-10',\n    // header - weekly only\n    colorHeader: 'teal-2',\n    backgroundHeader: 'teal-10',\n    colorHeaderOutside: 'teal-2',\n    backgroundHeaderOutside: 'teal-10',\n    // header - for daily only\n    colorHeaderPast: 'grey-11',\n    backgroundHeaderPast: 'teal-6',\n    colorHeaderCurrent: 'teal-2',\n    backgroundHeaderCurrent: 'teal-10',\n    colorHeaderFuture: 'teal-2',\n    backgroundHeaderFuture: 'teal-10',\n    // work week - monthly only\n    colorWorkWeekPast: 'teal-8',\n    backgroundWorkWeekPast: 'teal-6',\n    colorWorkWeekCurrent: 'orange-4',\n    backgroundWorkWeekCurrent: 'teal-10',\n    colorWorkWeekFuture: 'yellow-4',\n    backgroundWorkWeekFuture: 'teal-10',\n    // label\n    colorDayLabelOutside: 'teal-2',\n    backgroundDayLabelOutside: 'teal-8',\n    colorDayLabelPast: 'grey-11',\n    backgroundDayLabelPast: 'teal-6',\n    colorDayLabelCurrent: 'orange-4',\n    backgroundDayLabelCurrent: 'teal-10',\n    colorDayLabelFuture: 'yellow-4',\n    backgroundDayLabelFuture: 'teal-10',\n    // interval body\n    colorIntervalHeader: 'grey-2',\n    backgroundIntervalHeader: 'teal-8',\n    colorIntervalBody: 'grey-2',\n    backgroundIntervalBody: 'teal-8',\n    colorIntervalText: 'grey-2',\n    backgroundIntervalText: 'teal-8',\n    // scheduler body\n    colorSchedulerHeader: 'grey-2',\n    backgroundSchedulerHeader: 'teal-8',\n    colorSchedulerBody: 'grey-2',\n    backgroundSchedulerBody: 'teal-8',\n    colorSchedulerText: 'grey-2',\n    backgroundSchedulerText: 'teal-8'\n  },\n  {\n    name: 'brown',\n    // body\n    colorBody: 'brown-2',\n    backgroundBody: 'brown-8',\n    colorBodyOutside: 'grey-6',\n    backgroundBodyOutside: 'brown-8',\n    colorBodyPast: 'grey-11',\n    backgroundBodyPast: 'brown-6',\n    colorBodyCurrent: 'brown-2',\n    backgroundBodyCurrent: 'brown-10',\n    colorBodyFuture: 'brown-2',\n    backgroundBodyFuture: 'brown-10',\n    // header - weekly only\n    colorHeader: 'brown-2',\n    backgroundHeader: 'brown-10',\n    colorHeaderOutside: 'brown-2',\n    backgroundHeaderOutside: 'brown-10',\n    // header - for daily only\n    colorHeaderPast: 'grey-11',\n    backgroundHeaderPast: 'brown-6',\n    colorHeaderCurrent: 'brown-2',\n    backgroundHeaderCurrent: 'brown-10',\n    colorHeaderFuture: 'brown-2',\n    backgroundHeaderFuture: 'brown-10',\n    // work week - monthly only\n    colorWorkWeekPast: 'brown-8',\n    backgroundWorkWeekPast: 'brown-6',\n    colorWorkWeekCurrent: 'orange-4',\n    backgroundWorkWeekCurrent: 'brown-10',\n    colorWorkWeekFuture: 'yellow-4',\n    backgroundWorkWeekFuture: 'brown-10',\n    // label\n    colorDayLabelOutside: 'brown-2',\n    backgroundDayLabelOutside: 'brown-8',\n    colorDayLabelPast: 'grey-11',\n    backgroundDayLabelPast: 'brown-6',\n    colorDayLabelCurrent: 'orange-4',\n    backgroundDayLabelCurrent: 'brown-10',\n    colorDayLabelFuture: 'yellow-4',\n    backgroundDayLabelFuture: 'brown-10',\n    // interval body\n    colorIntervalHeader: 'grey-2',\n    backgroundIntervalHeader: 'brown-8',\n    colorIntervalBody: 'grey-2',\n    backgroundIntervalBody: 'brown-8',\n    colorIntervalText: 'grey-2',\n    backgroundIntervalText: 'brown-8',\n    // scheduler body\n    colorSchedulerHeader: 'grey-2',\n    backgroundSchedulerHeader: 'brown-8',\n    colorSchedulerBody: 'grey-2',\n    backgroundSchedulerBody: 'brown-8',\n    colorSchedulerText: 'grey-2',\n    backgroundSchedulerText: 'brown-8'\n  },\n  {\n    name: 'deep purple',\n    // body\n    colorBody: 'grey-2',\n    backgroundBody: 'deep-purple-8',\n    colorBodyOutside: 'grey-6',\n    backgroundBodyOutside: 'deep-purple-8',\n    colorBodyPast: 'grey-11',\n    backgroundBodyPast: 'deep-purple-6',\n    colorBodyCurrent: 'deep-purple-2',\n    backgroundBodyCurrent: 'deep-purple-10',\n    colorBodyFuture: 'deep-purple-2',\n    backgroundBodyFuture: 'deep-purple-10',\n    // header - weekly only\n    colorHeader: 'deep-purple-2',\n    backgroundHeader: 'deep-purple-10',\n    colorHeaderOutside: 'deep-purple-2',\n    backgroundHeaderOutside: 'deep-purple-10',\n    // header - for daily only\n    colorHeaderPast: 'grey-11',\n    backgroundHeaderPast: 'deep-purple-6',\n    colorHeaderCurrent: 'deep-purple-2',\n    backgroundHeaderCurrent: 'deep-purple-10',\n    colorHeaderFuture: 'deep-purple-2',\n    backgroundHeaderFuture: 'deep-purple-10',\n    // work week - monthly only\n    colorWorkWeekPast: 'deep-purple-8',\n    backgroundWorkWeekPast: 'deep-purple-6',\n    colorWorkWeekCurrent: 'orange-4',\n    backgroundWorkWeekCurrent: 'deep-purple-10',\n    colorWorkWeekFuture: 'yellow-4',\n    backgroundWorkWeekFuture: 'deep-purple-10',\n    // label\n    colorDayLabelOutside: 'deep-purple-2',\n    backgroundDayLabelOutside: 'deep-purple-8',\n    colorDayLabelPast: 'grey-11',\n    backgroundDayLabelPast: 'deep-purple-6',\n    colorDayLabelCurrent: 'orange-4',\n    backgroundDayLabelCurrent: 'deep-purple-10',\n    colorDayLabelFuture: 'yellow-4',\n    backgroundDayLabelFuture: 'deep-purple-10',\n    // interval body\n    colorIntervalHeader: 'grey-2',\n    backgroundIntervalHeader: 'deep-purple-8',\n    colorIntervalBody: 'grey-2',\n    backgroundIntervalBody: 'deep-purple-8',\n    colorIntervalText: 'grey-2',\n    backgroundIntervalText: 'deep-purple-8',\n    // scheduler body\n    colorSchedulerHeader: 'grey-2',\n    backgroundSchedulerHeader: 'deep-purple-8',\n    colorSchedulerBody: 'grey-2',\n    backgroundSchedulerBody: 'deep-purple-8',\n    colorSchedulerText: 'grey-2',\n    backgroundSchedulerText: 'deep-purple-8'\n  },\n  {\n    name: 'indigo',\n    // body\n    colorBody: 'grey-2',\n    backgroundBody: 'indigo-8',\n    colorBodyOutside: 'grey-6',\n    backgroundBodyOutside: 'indigo-8',\n    colorBodyPast: 'grey-11',\n    backgroundBodyPast: 'indigo-6',\n    colorBodyCurrent: 'indigo-2',\n    backgroundBodyCurrent: 'indigo-10',\n    colorBodyFuture: 'indigo-2',\n    backgroundBodyFuture: 'indigo-10',\n    // header - weekly only\n    colorHeader: 'indigo-2',\n    backgroundHeader: 'indigo-10',\n    colorHeaderOutside: 'indigo-2',\n    backgroundHeaderOutside: 'indigo-10',\n    // header - for daily only\n    colorHeaderPast: 'grey-11',\n    backgroundHeaderPast: 'indigo-6',\n    colorHeaderCurrent: 'indigo-2',\n    backgroundHeaderCurrent: 'indigo-10',\n    colorHeaderFuture: 'indigo-2',\n    backgroundHeaderFuture: 'indigo-10',\n    // work week - monthly only\n    colorWorkWeekPast: 'indigo-8',\n    backgroundWorkWeekPast: 'indigo-6',\n    colorWorkWeekCurrent: 'orange-4',\n    backgroundWorkWeekCurrent: 'indigo-10',\n    colorWorkWeekFuture: 'yellow-4',\n    backgroundWorkWeekFuture: 'indigo-10',\n    // label\n    colorDayLabelOutside: 'indigo-2',\n    backgroundDayLabelOutside: 'indigo-8',\n    colorDayLabelPast: 'grey-11',\n    backgroundDayLabelPast: 'indigo-6',\n    colorDayLabelCurrent: 'orange-4',\n    backgroundDayLabelCurrent: 'indigo-10',\n    colorDayLabelFuture: 'yellow-4',\n    backgroundDayLabelFuture: 'indigo-10',\n    // interval body\n    colorIntervalHeader: 'grey-2',\n    backgroundIntervalHeader: 'indigo-8',\n    colorIntervalBody: 'grey-2',\n    backgroundIntervalBody: 'indigo-8',\n    colorIntervalText: 'grey-2',\n    backgroundIntervalText: 'indigo-8',\n    // scheduler body\n    colorSchedulerHeader: 'grey-2',\n    backgroundSchedulerHeader: 'indigo-8',\n    colorSchedulerBody: 'grey-2',\n    backgroundSchedulerBody: 'indigo-8',\n    colorSchedulerText: 'grey-2',\n    backgroundSchedulerText: 'indigo-8'\n  },\n  {\n    name: 'blue',\n    // body\n    colorBody: 'grey-2',\n    backgroundBody: 'blue-8',\n    colorBodyOutside: 'grey-6',\n    backgroundBodyOutside: 'blue-8',\n    colorBodyPast: 'grey-11',\n    backgroundBodyPast: 'blue-6',\n    colorBodyCurrent: 'blue-2',\n    backgroundBodyCurrent: 'blue-10',\n    colorBodyFuture: 'blue-2',\n    backgroundBodyFuture: 'blue-10',\n    // header - weekly only\n    colorHeader: 'blue-2',\n    backgroundHeader: 'blue-10',\n    colorHeaderOutside: 'blue-2',\n    backgroundHeaderOutside: 'blue-10',\n    // header - for daily only\n    colorHeaderPast: 'grey-11',\n    backgroundHeaderPast: 'blue-6',\n    colorHeaderCurrent: 'blue-2',\n    backgroundHeaderCurrent: 'blue-10',\n    colorHeaderFuture: 'blue-2',\n    backgroundHeaderFuture: 'blue-10',\n    // work week - monthly only\n    colorWorkWeekPast: 'blue-8',\n    backgroundWorkWeekPast: 'blue-6',\n    colorWorkWeekCurrent: 'orange-4',\n    backgroundWorkWeekCurrent: 'blue-10',\n    colorWorkWeekFuture: 'yellow-4',\n    backgroundWorkWeekFuture: 'blue-10',\n    // label\n    colorDayLabelOutside: 'blue-2',\n    backgroundDayLabelOutside: 'blue-8',\n    colorDayLabelPast: 'grey-11',\n    backgroundDayLabelPast: 'blue-6',\n    colorDayLabelCurrent: 'orange-4',\n    backgroundDayLabelCurrent: 'blue-10',\n    colorDayLabelFuture: 'yellow-4',\n    backgroundDayLabelFuture: 'blue-10',\n    // interval body\n    colorIntervalHeader: 'grey-2',\n    backgroundIntervalHeader: 'blue-8',\n    colorIntervalBody: 'grey-2',\n    backgroundIntervalBody: 'blue-8',\n    colorIntervalText: 'grey-2',\n    backgroundIntervalText: 'blue-8',\n    // scheduler body\n    colorSchedulerHeader: 'grey-2',\n    backgroundSchedulerHeader: 'blue-8',\n    colorSchedulerBody: 'grey-2',\n    backgroundSchedulerBody: 'blue-8',\n    colorSchedulerText: 'grey-2',\n    backgroundSchedulerText: 'blue-8'\n  }\n]\n```\n\n### Theme Example\n\nThe usage, in QCalendar, goes like this (as an example):\n\nAt the top of your component do the imports.\n\n```js\nimport Vue from 'vue'\nimport Colorize from '@quasar/quasar-app-extension-colorize/src/colorize'\n\nexport default Vue.extend({\n  name: 'my-component',\n\n  mixins: [Colorize, Theme],\n\n  props: {\n    // color prop is added by colorize mix-in\n    // background-color is optional and needs to be added if needed\n    bgColor: String\n  },\n\n  render (h) {\n    return this.__renderWorkWeekHead(h)\n  }\n```\n\nthen, when rendering (example is \"live\" code from QCalendar):\n\n```js\n  __renderWorkWeekHead (h) {\n    let colors = new Map(), color, backgroundColor\n\n    // this function returns passed in \"data\", as-is\n    let updateColors = this.useDefaultTheme\n\n    if (this.enableTheme === true) {\n      color = 'colorHeader'\n      backgroundColor = 'backgroundHeader'\n\n      // get specified theme colors\n      colors = this.getThemeColors([color, backgroundColor])\n\n      // Colorize function to use, modifies \"style\"\n      updateColors = this.setBothColors\n    }\n\n    return h('div', updateColors(colors.get(color), colors.get(backgroundColor), {\n      staticClass: 'q-calendar-weekly__head-workweek'\n    }), '#')\n  }\n```\n> You can see the QCalendar theming in action [here](https://quasarframework.github.io/app-extension-qcalendar/demo). Scroll down the bottom left, turn on theming and then select one of the themes.",d=r("3aaa"),s=r("37a6"),c={name:"PageIndex",components:{Hero:t["a"]},data:function(){return{markdown:l,colorizeJson:d,themeJson:s}},computed:{toc:{get:function(){return this.$store.state.common.toc},set:function(e){this.$store.commit("common/toc",e)}}},methods:{onToc:function(e){e.push({id:"Colorize-API",label:"Colorize API",level:1,children:Array(0)}),e.push({id:"Theme-API",label:"Theme API",level:1,children:Array(0)}),e.push({id:"Donate",label:"Donate",level:1,children:Array(0)}),this.toc=e}}},u=c,i=r("2877"),b=Object(i["a"])(u,n,a,!1,null,null,null);o["default"]=b.exports}}]);